{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "71d81aee",
   "metadata": {},
   "source": [
    "### INSTRUCTIONS:  \n",
    "Create a logistics regression model to predict the class label from the first eight attributes of the question set.\n",
    "Try doing the same using two different subsets (your choice) of those eight attributes.\n",
    "Report the accuracies of each of these three models.\n",
    "For the two subsets that you use, provide some justification (why you chose those features in a given subset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "id": "2206da15",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd   #import libraries\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36c98922",
   "metadata": {},
   "source": [
    "### Problem 1\n",
    "An automated answer-rating site marks each post in a community forum website as “good” or “bad” based on the quality of the post. \n",
    "- Create a logistics regression model to predict the class label from the first eight attributes of the question set.\n",
    "- Try doing the same using two different subsets (your choice) of those eight attributes.\n",
    "- Report the accuracies of each of these three models.\n",
    "- For the two subsets that you use, provide some justification (why you chose those features in a given subset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "id": "38bdbd21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S.No.</th>\n",
       "      <th>num_words</th>\n",
       "      <th>num_characters</th>\n",
       "      <th>num_misspelled</th>\n",
       "      <th>bin_end_qmark</th>\n",
       "      <th>num_interrogative</th>\n",
       "      <th>bin_start_small</th>\n",
       "      <th>num_sentences</th>\n",
       "      <th>num_punctuations</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>39</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>81</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>31</td>\n",
       "      <td>173</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>510</td>\n",
       "      <td>17</td>\n",
       "      <td>93</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>511</td>\n",
       "      <td>76</td>\n",
       "      <td>329</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>G</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    S.No.  num_words  num_characters  num_misspelled  bin_end_qmark  \\\n",
       "5       6          7              39               1              0   \n",
       "2       3         20              81               0              1   \n",
       "9      10         31             173              26              0   \n",
       "23    510         17              93               1              0   \n",
       "24    511         76             329               3              0   \n",
       "\n",
       "    num_interrogative  bin_start_small  num_sentences  num_punctuations label  \n",
       "5                   0                0              1                 2     B  \n",
       "2                  19                0              1                 1     B  \n",
       "9                   0                1              3                 7     B  \n",
       "23                  1                0              1                 0     G  \n",
       "24                  3                0              8                 9     G  "
      ]
     },
     "execution_count": 394,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "quality = pd.read_csv('/Users/jennyskytta/Downloads/quality.csv') # load in quality csv\n",
    "quality.sample(5) # outcome is B or G on variable \"label\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "id": "f51dc2ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression  # import our library \n",
    "# assign variable for our LR function  \n",
    "# set the number of iterations for the Logistic Model \n",
    "m = LogisticRegression(max_iter=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "id": "5edd3608",
   "metadata": {},
   "outputs": [],
   "source": [
    "yQ = quality.label.values #assign my outcome vector \n",
    "XQ = quality[[\"num_words\", \"num_characters\", \"num_misspelled\", \"bin_end_qmark\", \"num_interrogative\", \"bin_start_small\", \"num_sentences\", \"num_punctuations\"]].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 397,
   "id": "7878c52d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8214285714285714"
      ]
     },
     "execution_count": 397,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = m.fit(XQ,yQ)\n",
    "yhat = m.predict(XQ) # lets start our predictions\n",
    "m.score(XQ,yQ)# calculate accuracy at 82 %"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c33c544",
   "metadata": {},
   "source": [
    "##### Subset 2 of Quality data\n",
    "I selected number of words, number of mispellings, number of sentences and number of punctuations solely because they intuitively appear to be hallmarks of quality writing.  One would assume that you're going to convey a better message with more succinct words that are spelled correctly, with proper grammar and punctuation.  These appear to be better predictors than the combined 8 variables as they predict with 85% accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 398,
   "id": "62b4d56f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8571428571428571"
      ]
     },
     "execution_count": 398,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yQ2 = quality.label.values #assign my outcome vector \n",
    "XQ2 = quality[[\"num_words\", \"num_misspelled\", \"num_sentences\", \"num_punctuations\"]].values\n",
    "model = m.fit(XQ2,yQ2)\n",
    "yhat = m.predict(XQ2) # lets start our predictions\n",
    "m.score(XQ2,yQ2)# calculate accuracy at 85 % - MUCH BETTER"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0e8d1e8",
   "metadata": {},
   "source": [
    "##### Subset 3 of Quality data\n",
    "For good measure, I 3 of the remaining variables to assess if they might have stronger influence that my intuition expected.  As we see, they are poorer predictors of quality than the previous subset, as this model has 64% accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "id": "912c2c0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6428571428571429"
      ]
     },
     "execution_count": 399,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yQ3 = quality.label.values #assign my outcome vector \n",
    "XQ3 = quality[[\"bin_end_qmark\", \"num_interrogative\", \"bin_start_small\"]].values\n",
    "model = m.fit(XQ3,yQ3)\n",
    "yhat = m.predict(XQ3) # lets start our predictions\n",
    "m.score(XQ3,yQ3)# calculate accuracy at 64 % - MUCH WORSE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27266979",
   "metadata": {},
   "source": [
    "### Problem 2\n",
    "Using a “wine” dataset, containing information about several wines, their characteristics, and their quality, do some experiments (trial-and-error) to figure out a good subset of features to use for learning wine quality. Report these features.\n",
    "- Download wine dataset. It contains information about several wines—their characteristics (features) and if it's considered high quality or not (1 or 0).\n",
    "- First, do some experiments (trial-and-error) to figure out a good subset of features to use for learning wine quality (last column). Report these features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "id": "198ae13c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6497, 15)\n",
      "0.0    5220\n",
      "1.0    1277\n",
      "Name: high_quality, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed_acidity</th>\n",
       "      <th>volatile_acidity</th>\n",
       "      <th>citric_acid</th>\n",
       "      <th>residual_sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free_sulfur_dioxide</th>\n",
       "      <th>total_sulfur_dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "      <th>color</th>\n",
       "      <th>is_red</th>\n",
       "      <th>high_quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5708</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0.255</td>\n",
       "      <td>0.22</td>\n",
       "      <td>2.7</td>\n",
       "      <td>0.043</td>\n",
       "      <td>46.0</td>\n",
       "      <td>153.0</td>\n",
       "      <td>0.99238</td>\n",
       "      <td>3.75</td>\n",
       "      <td>0.76</td>\n",
       "      <td>11.3</td>\n",
       "      <td>6</td>\n",
       "      <td>white</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1099</th>\n",
       "      <td>8.6</td>\n",
       "      <td>0.520</td>\n",
       "      <td>0.38</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.096</td>\n",
       "      <td>5.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>0.99666</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.52</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "      <td>red</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1086</th>\n",
       "      <td>8.5</td>\n",
       "      <td>0.340</td>\n",
       "      <td>0.40</td>\n",
       "      <td>4.7</td>\n",
       "      <td>0.055</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.99738</td>\n",
       "      <td>3.38</td>\n",
       "      <td>0.66</td>\n",
       "      <td>11.6</td>\n",
       "      <td>7</td>\n",
       "      <td>red</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2877</th>\n",
       "      <td>7.0</td>\n",
       "      <td>0.240</td>\n",
       "      <td>0.36</td>\n",
       "      <td>4.9</td>\n",
       "      <td>0.083</td>\n",
       "      <td>10.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>0.99420</td>\n",
       "      <td>3.33</td>\n",
       "      <td>0.37</td>\n",
       "      <td>10.8</td>\n",
       "      <td>6</td>\n",
       "      <td>white</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>9.2</td>\n",
       "      <td>0.520</td>\n",
       "      <td>1.00</td>\n",
       "      <td>3.4</td>\n",
       "      <td>0.610</td>\n",
       "      <td>32.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>0.99960</td>\n",
       "      <td>2.74</td>\n",
       "      <td>2.00</td>\n",
       "      <td>9.4</td>\n",
       "      <td>4</td>\n",
       "      <td>red</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed_acidity  volatile_acidity  citric_acid  residual_sugar  chlorides  \\\n",
       "5708            5.0             0.255         0.22             2.7      0.043   \n",
       "1099            8.6             0.520         0.38             1.5      0.096   \n",
       "1086            8.5             0.340         0.40             4.7      0.055   \n",
       "2877            7.0             0.240         0.36             4.9      0.083   \n",
       "151             9.2             0.520         1.00             3.4      0.610   \n",
       "\n",
       "      free_sulfur_dioxide  total_sulfur_dioxide  density    pH  sulphates  \\\n",
       "5708                 46.0                 153.0  0.99238  3.75       0.76   \n",
       "1099                  5.0                  18.0  0.99666  3.20       0.52   \n",
       "1086                  3.0                   9.0  0.99738  3.38       0.66   \n",
       "2877                 10.0                 133.0  0.99420  3.33       0.37   \n",
       "151                  32.0                  69.0  0.99960  2.74       2.00   \n",
       "\n",
       "      alcohol  quality  color  is_red  high_quality  \n",
       "5708     11.3        6  white     0.0           0.0  \n",
       "1099      9.4        5    red     1.0           0.0  \n",
       "1086     11.6        7    red     1.0           1.0  \n",
       "2877     10.8        6  white     0.0           0.0  \n",
       "151       9.4        4    red     1.0           0.0  "
      ]
     },
     "execution_count": 400,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wine = pd.read_csv('/Users/jennyskytta/Downloads/wine.csv') # load in wine csv\n",
    "print(wine.shape)  # look at shape\n",
    "print(wine.high_quality.value_counts())  # value counts of high quality\n",
    "wine.sample(5) # view the dataframe /explore the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "id": "e4be45a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fixed_acidity           0\n",
       "volatile_acidity        0\n",
       "citric_acid             0\n",
       "residual_sugar          0\n",
       "chlorides               0\n",
       "free_sulfur_dioxide     0\n",
       "total_sulfur_dioxide    0\n",
       "density                 0\n",
       "pH                      0\n",
       "sulphates               0\n",
       "alcohol                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 401,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores = wine[[\"fixed_acidity\", \"volatile_acidity\", \"citric_acid\", \"residual_sugar\", \"chlorides\", \"free_sulfur_dioxide\", \"total_sulfur_dioxide\", \"density\", \"pH\", \"sulphates\", \"alcohol\"]]\n",
    "scores.isna().sum() # check for missing values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 402,
   "id": "a3084664",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8,8))  # looking at existing correlations to get an idea of which might impact \n",
    "seaborn.heatmap(wine.corr(), ax=ax)    # high quality \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "id": "aab3cb63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8483915653378482"
      ]
     },
     "execution_count": 433,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#      Model 1 with density, alcohol, and is_red \n",
    "y = wine.high_quality.values #assign my outcome vector \n",
    "#assign predictive variables - chosen based on high variability in range of values \n",
    "X = wine[[\"density\",\"alcohol\", \"is_red\"]].values\n",
    "model = m.fit(X,y)\n",
    "m.score(X,y)# calculate accuracy  - % of correct predictions \n",
    "# this shows that the mean is 85% accurate "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "id": "c05c1e98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., ..., 0., 1., 0.])"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yhat = m.predict(X) # lets start our predictions\n",
    "yhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "dd8d737f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.832845928890257"
      ]
     },
     "execution_count": 436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#      Model 2 with density, ph, and sulphates \n",
    "y2 = wine.high_quality.values #assign my outcome vector \n",
    "#assign predictive variables - chosen based on high variability in range of values \n",
    "X2 = wine[[\"density\", \"pH\", \"sulphates\"]].values\n",
    "model2 = m.fit(X2,y2)\n",
    "yhat2 = m.predict(X2)\n",
    "m.score(X2,y2)  # still 84% accuracy for predicting high quality "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "id": "5b219338",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8111436047406495"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#      Model 3 with just density \n",
    "y3 = wine.high_quality.values #assign my outcome vector \n",
    "X3 = wine[[\"density\"]].values #assign predictive variable\n",
    "model3 = m.fit(X3,y3)\n",
    "yhat3 = m.predict(X3)\n",
    "m.score(X3,y3)  # still 81% accuracy for predicting high quality "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "id": "84909c97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7842080960443282"
      ]
     },
     "execution_count": 439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#      Model 4 with just alcohol\n",
    "y4 = wine.high_quality.values #assign my outcome vector \n",
    "X4 = wine[[\"alcohol\"]].values #assign predictive variables\n",
    "model4 = m.fit(X4,y4)\n",
    "yhat4 = m.predict(X4)\n",
    "m.score(X4,y4)  # 78% maintained with 1 variable"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04a8ee67",
   "metadata": {},
   "source": [
    "#### Testing Variables Results\n",
    "I tried 4 models using combinations or single variables to determine which variables had the most accuracy and for the most part, results showed within the 80% predictive accuracy which isn't bad.  There were 3 however that when together showed 85% accuracy and those were is_red, alcohol and density.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e179c679",
   "metadata": {},
   "source": [
    "### kNN test with 70% ranging 2-10\n",
    "- Then, use 70% data for training to build a kNN classifier with different values of k ranging from 2–10.\n",
    "- Plot your accuracies with each of these. In other words, your final result will be a line chart with k on the x-axis and accuracy on the y-axis. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "id": "fe37c267",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9119593658611667"
      ]
     },
     "execution_count": 447,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier \n",
    "\n",
    "m = KNeighborsClassifier(2)  # testing on model 1 parameters to compare\n",
    "m.fit(X,y)  # fit is the same thing as \"train\"  - we used everything for training so everything is trained \n",
    "m.score(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "id": "447b5377",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8045294635004397\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split \n",
    "np.random.seed(3) # set the seed to make reproducible\n",
    "# Predictor variables: density, alcohol, is_red\n",
    "Xt, Xv, yt, yv = train_test_split(X, y, test_size = 0.30) # Xt means Xtest and Xv means validation \n",
    "m = KNeighborsClassifier(10) \n",
    "m.fit(Xt, yt) # fit model with testing data\n",
    "print(m.score(Xv, yv)) # validating "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 450,
   "id": "717ca088",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8021108179419525\n"
     ]
    }
   ],
   "source": [
    "m = KNeighborsClassifier(2)  # 2 nearest neighbors\n",
    "m.fit(Xt, yt) # fit model with testing data\n",
    "print(m.score(Xv, yv)) # validating "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 451,
   "id": "effb6d38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7959542656112577\n"
     ]
    }
   ],
   "source": [
    "m = KNeighborsClassifier(6) # 6 nearest neighbors\n",
    "m.fit(Xt, yt) # fit model with testing data\n",
    "print(m.score(Xv, yv)) # validating "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "id": "ab5a6d4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8045294635004397\n"
     ]
    }
   ],
   "source": [
    "m = KNeighborsClassifier(10)\n",
    "m.fit(Xt, yt) # fit model with testing data\n",
    "print(m.score(Xv, yv)) # validating "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 454,
   "id": "707bc28a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "accuracies = []\n",
    "for k in range(2,10):\n",
    "    m = KNeighborsClassifier(k)\n",
    "    m.fit(Xt, yt)\n",
    "    accuracies.append(m.score(Xv, yv))\n",
    "\n",
    "_ = plt.plot(range(2,10), accuracies, marker=\"o\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
